/**
 * 単独レイヤ
 */
class KAGEnvSimpleLayer extends KAGEnvLayer, KAGEnvLevelLayer {

	var deleteFlag;
	
	/**
	 * コンストラクタ
	 * @param env
	 * @param name
	 * @param level
	 */
	function KAGEnvSimpleLayer(env, name) {
		global.KAGEnvLayer.KAGEnvLayer(env, name);
		global.KAGEnvLevelLayer.KAGEnvLevelLayer();
		initDisp = true;
	}

    function finalize() {
        // 順番変更不可
        global.KAGEnvLevelLayer.finalize();
        global.KAGEnvLayer.finalize();
    }

	function onStore(f) {
		global.KAGEnvLayer.onStore(f);
		global.KAGEnvLevelLayer.onStore(f);
    }

    function onRestore(f) {
		global.KAGEnvLayer.onRestore(f);
		global.KAGEnvLevelLayer.onRestore(f);
    }

    var layerCommands = %[
	front : this.setFront incontextof this,
	back : this.setBack incontextof this,
    level : this.setLevel incontextof this,
	levelz: function (param, elm) { this.levelz = +param; } incontextof this,
	"delete" => function (param, elm) { deleteFlag=true; disp = CLEAR; } incontextof this,
        ];

	/**
	 * ファイル読み込み部差し替え
	 */
	function setLoadFile(file, elm) {
		var info = env.envinfo.layers !== void ? env.envinfo.layers[name] : void;
		global.KAGEnvLayer.setLoadFile(file, elm);
		if (info !== void) {
			setAutoTrans([info.trans, env.envinfo.layerTrans], elm);
		} else {
			setAutoTrans([env.envinfo.layerTrans], elm);
		}
	}

	/**
	 * 表示処理用の自動トランジションの指定
	 */
	function setDispAutoTrans(elm) {
		var info = env.envinfo.layers !== void ? env.envinfo.layers[name] : void;
		if (info !== void) {
			setAutoTrans([info.dispTrans, env.envinfo.layerDispTrans], elm);
		} else {
			setAutoTrans([env.envinfo.layerDispTrans], elm);
		}
	}
}
